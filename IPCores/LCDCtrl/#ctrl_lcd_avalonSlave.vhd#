--------------------------------------------------------------
-- File: LCDCtrl.vhd
-- Rev: 0.9
-- Date: 09.10.2017
-- Author: Mario Fischer
-- Description: LCD Control of MES Board
--				with NIOS II Avalon Bus Interface
--------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;

entity ctrl_lcd_avalonSlave is
   port ( -- Here the internal interface is defined
          Clock                 : in  std_logic;
          Reset                 : in  std_logic;
          
          -- Here the avalon slave interface is defined
          slave_address         : in  std_logic_vector( 1 downto 0 );
          slave_cs              : in  std_logic;
          slave_we              : in  std_logic;
          slave_rd              : in  std_logic;
          slave_write_data      : in  std_logic_vector(31 downto 0 );
          slave_read_data       : out std_logic_vector(31 downto 0 );
          slave_wait_request    : out std_logic;
          

          -- Here the external LCD-panel signals are defined
          ChipSelectBar         : out std_logic;
          DataCommandBar        : out std_logic;
          WriteBar              : out std_logic;
          ReadBar               : out std_logic;
          ResetBar              : out std_logic;
          IM0                   : out std_logic;
          DataBus               : inout std_logic_vector( 15 downto 0 ));
end ctrl_lcd_avalonSlave;

     -------- register model -----------
     -- 00  write: Write a command to LCD
     --     read :  Read a command from LCD
     -- 01  write: Write data to LCD
     --     read : Read data from LCD
     -- 10  r/w  : Control register
     --            bit 0  => Select 0 => Sixteen bit transfer
     --                      Select 1 => Eight bit transfer
     --            bit 1  => Busy flag (read only)
     --                      Reset LCD Display (write only)
     --            others => 0

     architecture rtl of ctrl_lcd_avalonSlave is

   type LCD_READ_TYPE is (IDLE, WAITBUSY, INITREAD, WAITREAD, RELEASE);

   component SendReceiveInterface is
      port (  -- Here the internal interface is defined
             Clock                 : in    std_logic;
             Reset                 : in    std_logic;
             ResetDisplay          : in    std_logic;
             StartSendReceive      : in    std_logic;
             CommandBarData        : in    std_logic;
             EightBitSixteenBitBar : in    std_logic;
             WriteReadBar          : in    std_logic;
             DataToSend            : in    std_logic_vector(15 downto 0);
             DataReceived          : out   std_logic_vector(15 downto 0);
             busy                  : out   std_logic;
             -- Here the external LCD-panel signals are defined
             ChipSelectBar         : out   std_logic;
             DataCommandBar        : out   std_logic;
             WriteBar              : out   std_logic;
             ReadBar               : out   std_logic;
             ResetBar              : out   std_logic;
             IM0                   : out   std_logic;
             DataBus               : inout std_logic_vector(15 downto 0));
   end component;

   signal s_WriteReadBar     : std_logic;
   signal s_StartSendReceive : std_logic;
   signal s_CommandBarData   : std_logic;
   signal s_busy             : std_logic;
   signal s_control_reg      : std_logic_vector(31 downto 0);
   signal s_control_next     : std_logic_vector(31 downto 0);
   signal s_LCD_data_out     : std_logic_vector(15 downto 0);
   signal s_current_state    : LCD_READ_TYPE;
   signal s_next_state       : LCD_READ_TYPE;
   signal s_reset_display    : std_logic;

begin
--------------------------------------------------------------------------------
---                                                                          ---
--- In this section the avalon slave signals are defined                     ---
---                                                                          ---
--------------------------------------------------------------------------------
 


--------------------------------------------------------------------------------
---                                                                          ---
--- In this section the LCD-read state machine is defined                    ---
---                                                                          ---
--------------------------------------------------------------------------------

  

--------------------------------------------------------------------------------
---                                                                          ---
--- In this section the control register is defined                          ---
---                                                                          ---
--------------------------------------------------------------------------------
 


--------------------------------------------------------------------------------
---                                                                          ---
--- In this section all control signals are defined                          ---
---                                                                          ---
--------------------------------------------------------------------------------

 


--------------------------------------------------------------------------------
---                                                                          ---
--- In this section all components are connected                             ---
---                                                                          ---
--------------------------------------------------------------------------------

   interface : SendReceiveInterface
      port map (Clock                  => Clock,
                 Reset                 => Reset,
                 ResetDisplay          => s_reset_display,
                 StartSendReceive      => s_StartSendReceive,
                 CommandBarData        => s_CommandBarData,
                 EightBitSixteenBitBar => s_control_reg(0),
                 WriteReadBar          => s_WriteReadBar,
                 DataToSend            => slave_write_data(15 downto 0),
                 DataReceived          => s_LCD_data_out,
                 busy                  => s_busy,
                 -- Here the external LCD-panel signals are defined
                 ChipSelectBar         => ChipSelectBar,
                 DataCommandBar        => DataCommandBar,
                 WriteBar              => WriteBar,
                 ReadBar               => ReadBar,
                 ResetBar              => ResetBar,
                 IM0                   => IM0,
                 DataBus               => DataBus);

END architecture rtl;
     